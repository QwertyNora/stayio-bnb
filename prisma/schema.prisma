// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userName          String    @unique
  firstName         String
  lastName          String
  email             String    @unique
  password          String
  passwordResetUUID String?
  isAdmin           Boolean   @default(false)
  listings          Listing[]
  bookings          Booking[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("users")
}

model Customer {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String
  phone     String

  @@map("customers")
}

model Listing {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  address     String
  country     String
  dailyRate   Float
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdById String           @db.ObjectId
  bookedBy    Booking[]
  bookedDates DateTime[]
  amenities   ListingAmenity[] // Many-to-Many relation via a junction table
  images      String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("listings")
}

model Amenity {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String           @unique
  icon     String? // Optional field to store an icon name or class for the amenity
  listings ListingAmenity[] // Many-to-Many relation

  @@map("amenities")
}

model ListingAmenity {
  id        String @id @default(auto()) @map("_id") @db.ObjectId // Unique ID for each relation
  listingId String @db.ObjectId
  amenityId String @db.ObjectId

  listing Listing @relation(fields: [listingId], references: [id])
  amenity Amenity @relation(fields: [amenityId], references: [id])

  @@unique([listingId, amenityId]) // Ensures unique listing-amenity pairs
  @@map("listing_amenities")
}

model Booking {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdDate  DateTime @default(now())
  checkInDate  DateTime
  checkOutDate DateTime
  totalPrice   Float
  listing      Listing  @relation(fields: [listingId], references: [id])
  listingId    String   @db.ObjectId
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("bookings")
}
